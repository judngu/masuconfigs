#!/usr/bin/env ruby

require 'octokit'

unless ENV['BRANCH_TAG_COMPARISON_OAUTH']
	puts "missing required env variable: BRANCH_TAG_COMPARISON_OAUTH"
	puts "this should contain an OAUTH key you've created for this app"
	puts "the key should have access to the repo in question"
end

def puts_open_pr_info(opr)
	puts "\t\t* #{opr.title}"
	puts "\t\t  by #{opr["head"]["user"]["login"]}"
	puts "\t\t  #{opr["html_url"]}"
end



`git fetch upstream`
upstream_branches = `git branch -a | grep upstream`.split("\n")
upstream_branches = upstream_branches.map{|ub| ub.sub(/.*\//, '')}
release_branches = upstream_branches.select{|ub|
	ub.match(/_v\d{2}_\d+(?:_\d+){0,1}/)
}
tag_to_branch = {}
branch_to_tag = {}
tags_for_branches = []
release_branches.each do |rb|
	tag = rb.sub(/.*_v(\d{2})/, "v\\1").sub(/_rc_{0,1}\d*$/, '')
		.gsub('_', '.').sub(/(?:\.\D+)+$/, '')
	tag_to_branch[tag] = rb
	tags_for_branches.push(tag)
end

tag_test = Hash[*tags_for_branches.map{|tfb| [tfb, false]}.flatten]
actual_tags = `git tag`.split("\n")
actual_tags.each do | at |
	if tag_test.has_key? at
		tag_test[at] = true
	end
end

branches_without_tags = []
branches_with_tags = []
tag_test.keys.each do |k|
	if ! tag_test[k]
		branches_without_tags.push(tag_to_branch[k])
	else
		branches_with_tags.push(tag_to_branch[k])
	end
	branch_to_tag[tag_to_branch[k]]=k
end



client = Octokit::Client.new(:access_token => ENV['BRANCH_TAG_COMPARISON_OAUTH'])
# client.login
# client.user.login

#client.pull_requests('RBM-Technologies/vmm', {:base=>'development'})
# the remote branch
#client.pull_requests('RBM-Technologies/vmm', {:base=>'development'}).first["head"]["ref"]
# the repo it came from
#client.pull_requests('RBM-Technologies/vmm', {:base=>'development'}).first["head"]["repo"]["url"]

repo = client.repo('RBM-Technologies/vmm')



puts "#{branches_with_tags.count} existant upstream branches WITH tags (DELETE THESE):" 

branches_with_tags.each do | branch |
	if File.exists?(".git/refs/remotes/upstream/#{branch}")
		puts branch
		open_prs = client.pull_requests(ENV['BRANCH_TAG_COMPARISON_REPO'], {:base=>branch})
		if ! open_prs.nil? and open_prs.size > 0
			puts "\topen PRs against this branch:"
			open_prs.each do | opr |
				puts_open_pr_info(opr)
			end
		else
			puts "#{branch} is deletable. Shall I kill it?"
			kill = gets.chomp
			if kill.match(/y(?:es)?/i)
				puts "executing: git push #{ENV['BRANCH_TAG_COMPARISON_REMOTE']} :#{branch}"
					`git push upstream :#{branch}`
			else
				puts "leaving it be"
			end
		end
	end
end


puts "\n\n#{branches_without_tags.count} existant upstream branches WITHOUT tags (PRUNE THESE):"
branches_without_tags.each do | branch |
	puts "#{branch} --> expected tag: #{branch_to_tag[branch]}"
	open_prs = client.pull_requests(ENV['BRANCH_TAG_COMPARISON_REPO'], {:base=>branch})
	if ! open_prs.nil? and open_prs.size > 0
		puts "open PRs against this branch:"
		open_prs.each do | opr |
			puts_open_pr_info(opr)
		end
	end
end

# puts tags_for_branches.join("\n")
